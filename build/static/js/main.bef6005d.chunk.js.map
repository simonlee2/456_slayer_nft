{"version":3,"sources":["assets/twitter-logo.svg","constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","App.js","index.js"],"names":["CONTRACT_ADDRESS","transformCharacterData","characterData","name","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","useEffect","ethereum","window","signer","ethers","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","console","log","getCharacters","a","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","alert","checkIfUserHasNFT","characterNFT","on","off","length","character","index","src","alt","type","onClick","characterId","mintCharacterNFT","mintTxn","wait","warn","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","fetchBoss","getBigBoss","bossTxn","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","runAttackAction","attackBoss","attackTxn","setTimeout","id","value","max","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","isCorrectNetwork","setIsCorrectNetwork","isLoading","setIsLoading","checkIfWalletIsConnected","checkNetwork","request","method","accounts","account","chainId","connectWalletAction","fetchNFTMetadata","provider","txn","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bef6005d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","const CONTRACT_ADDRESS = '0xa95B2B02d28AA4E059b969513a8aF93C75C3fAee';\n\n/*\n * Add this method and make sure to export it on the bottom!\n */\nconst transformCharacterData = (characterData) => {\n    return {\n        name: characterData.name,\n        imageURI: characterData.imageURI,\n        hp: characterData.hp.toNumber(),\n        maxHp: characterData.maxHp.toNumber(),\n        attackDamage: characterData.attackDamage.toNumber(),\n    };\n};\n\nexport { CONTRACT_ADDRESS, transformCharacterData };\n","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport LoadingIndicator from '../LoadingIndicator';\n\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n\n  // Set up contract upon component mount\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      /*\n       * This is the big difference. Set our gameContract in state.\n       */\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\n  // Set up characters upon fetching contract\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log('Getting contract characters to mint');\n\n        /*\n         * Call contract to get all mint-able characters\n         */\n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log('charactersTxn:', charactersTxn);\n\n        /*\n         * Go through all of our characters and transform the data\n         */\n        const characters = charactersTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n\n        /*\n         * Set all mint-able characters in state\n         */\n        setCharacters(characters);\n      } catch (error) {\n        console.error('Something went wrong fetching characters:', error);\n      }\n    };\n    /*\n    * Add a callback method that will fire when this event is received\n    */\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n\n      alert(`Your NFT is all done -- see it here: https://testnets.opensea.io/assets/${gameContract}/${tokenId.toNumber()}`)\n\n      /*\n       * Once our character NFT is minted we can fetch the metadata from our contract\n       * and set it in state to move onto the Arena\n       */\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log('CharacterNFT: ', characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters();\n\n      /*\n       * Setup NFT Minted Listener\n       */\n      gameContract.on('CharacterNFTMinted', onCharacterMint);\n    }\n\n    return () => {\n      /*\n       * When your component unmounts, let;s make sure to clean up this listener\n       */\n      if (gameContract) {\n        gameContract.off('CharacterNFTMinted', onCharacterMint);\n      }\n    };\n  }, [gameContract]);\n\n  const mintCharacterNFTAction = (characterId) => async () => {\n    try {\n      if (gameContract) {\n        setMintingCharacter(true);\n        console.log('Minting character in progress...');\n        const mintTxn = await gameContract.mintCharacterNFT(characterId);\n        await mintTxn.wait();\n        console.log('mintTxn:', mintTxn);\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn('MintCharacterAction Error:', error);\n      setMintingCharacter(false);\n    }\n  };\n\n  // Render Methods\n  const renderCharacters = () =>\n    characters.map((character, index) => (\n      <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n          <p>{character.name}</p>\n        </div>\n        <img src={character.imageURI} alt={character.name} />\n        <button\n          type=\"button\"\n          className=\"character-mint-button\"\n          onClick={mintCharacterNFTAction(index)}\n        >{`Mint ${character.name}`}</button>\n      </div>\n    ));\n\n  return (\n    <div className=\"select-character-container\">\n      <h2>Mint Your Hero. Choose wisely.</h2>\n      {/* Only show this when there are characters in state */}\n      {characters.length > 0 && (\n        <div className=\"character-grid\">{renderCharacters()}</div>\n      )}\n      {/* Only show our loading state if mintingCharacter is true */}\n      {mintingCharacter && (\n        <div className=\"loading\">\n          <div className=\"indicator\">\n            <LoadingIndicator />\n            <p>Minting In Progress...</p>\n          </div>\n          <img\n            src=\"https://media.giphy.com/media/PoH8W34niENYkiEh8t/giphy.gif\"\n            alt=\"Minting loading indicator\"\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SelectCharacter;","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport './Arena.css';\nimport LoadingIndicator from '../LoadingIndicator';\n\n/*\n * We pass in our characterNFT metadata so we can a cool card in our UI\n */\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n  // State\n  const [gameContract, setGameContract] = useState(null);\n  const [boss, setBoss] = useState(null);\n  const [attackState, setAttackState] = useState('');\n  const [showToast, setShowToast] = useState(false);\n\n  // UseEffects\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\n  // UseEffects\n  useEffect(() => {\n    /*\n     * Setup async function that will get the boss from our contract and sets in state\n     */\n    const fetchBoss = async () => {\n      const bossTxn = await gameContract.getBigBoss();\n      console.log('Boss:', bossTxn);\n      setBoss(transformCharacterData(bossTxn));\n    };\n\n    if (gameContract) {\n      /*\n       * gameContract is ready to go! Let's fetch our boss\n       */\n      fetchBoss();\n    }\n  }, [gameContract]);\n\n  // UseEffects\n  useEffect(() => {\n    const fetchBoss = async () => {\n      const bossTxn = await gameContract.getBigBoss();\n      console.log('Boss:', bossTxn);\n      setBoss(transformCharacterData(bossTxn));\n    };\n\n    /*\n    * Setup logic when this event is fired off\n    */\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n      const bossHp = newBossHp.toNumber();\n      const playerHp = newPlayerHp.toNumber();\n\n      console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n      /*\n       * Update both player and boss Hp\n       */\n      setBoss((prevState) => {\n        return { ...prevState, hp: bossHp };\n      });\n\n      setCharacterNFT((prevState) => {\n        return { ...prevState, hp: playerHp };\n      });\n    };\n\n    if (gameContract) {\n      fetchBoss();\n      gameContract.on('AttackComplete', onAttackComplete);\n    }\n\n    /*\n    * Make sure to clean up this event when this component is removed\n    */\n    return () => {\n      if (gameContract) {\n        gameContract.off('AttackComplete', onAttackComplete);\n      }\n    }\n  }, [gameContract]);\n\n  const runAttackAction = async () => {\n    try {\n      if (gameContract) {\n        setAttackState('attacking');\n        console.log('Attacking boss...');\n        const attackTxn = await gameContract.attackBoss();\n        await attackTxn.wait();\n        console.log('attackTxn:', attackTxn);\n        setAttackState('hit');\n\n        setShowToast(true);\n        setTimeout(() => {\n          setShowToast(false);\n        }, 5000);\n      }\n    } catch (error) {\n      console.error('Error attacking boss:', error);\n      setAttackState('');\n    }\n  }\n\n  return (\n    <div className=\"arena-container\">\n      {/* Toast */}\n      {showToast && (\n        <div id=\"toast\" className=\"show\">\n          <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n        </div>\n      )}\n      {/* Boss */}\n      {boss && (\n        <div className=\"boss-container\">\n          <div className={`boss-content`}>\n            <h2>🔥 {boss.name} 🔥</h2>\n            <div className=\"image-content\">\n              <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n              <div className=\"health-bar\">\n                <progress value={boss.hp} max={boss.maxHp} />\n                <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n              </div>\n            </div>\n          </div>\n          <div className=\"attack-container\">\n            <button className=\"cta-button\" onClick={runAttackAction}>\n              {`💥 Attack ${boss.name}`}\n            </button>\n          </div>\n          {attackState === 'attacking' && (\n            <div className=\"loading-indicator\">\n              <LoadingIndicator />\n              <p>Attacking ⚔️</p>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Character NFT */}\n      {characterNFT && (\n        <div className=\"players-container\">\n          <div className=\"player-container\">\n            <h2>Your Character</h2>\n            <div className=\"player\">\n              <div className=\"image-content\">\n                <h2>{characterNFT.name}</h2>\n                <img\n                  src={characterNFT.imageURI}\n                  alt={`Character ${characterNFT.name}`}\n                />\n                <div className=\"health-bar\">\n                  <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                  <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n                </div>\n              </div>\n              <div className=\"stats\">\n                <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n              </div>\n            </div>\n          </div>\n        </div>)}\n    </div>\n  );\n};\n\nexport default Arena;","import React, { useState, useEffect } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport SelectCharacter from './Components/SelectCharacter';\nimport Arena from './Components/Arena';\nimport LoadingIndicator from './Components/LoadingIndicator';\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\nimport myEpicGame from './utils/MyEpicGame.json';\nimport { ethers } from 'ethers';\n\n\n// Constants\nconst TWITTER_HANDLE = 'simonlee_dev';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst CONTRACT_CHAIN_ID = '0x3';\nconst CONTRACT_CHAIN_NAME = \"Ropsten Test Network\";\n\nconst App = () => {\n  // State\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [isCorrectNetwork, setIsCorrectNetwork] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n      }\n\n      await checkNetwork(ethereum)\n\n      if (isCorrectNetwork) {\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log('Found an authorized account:', account);\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n          setIsLoading(false);\n        }\n      } else {\n        setIsLoading(false)\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkNetwork = async (ethereum) => {\n    let chainId = await ethereum.request({ method: 'eth_chainId' });\n    console.log(\"Connected to chain \" + chainId);\n \n    if (chainId !== CONTRACT_CHAIN_ID) {\n      alert(`You are not connected to the ${CONTRACT_CHAIN_NAME}!`);\n      setIsCorrectNetwork(false);\n    } else {\n      setIsCorrectNetwork(true);\n    }\n  }\n\n  /*\n  * Implement your connectWallet method here\n  */\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n\n      /*\n      * Fancy method to request access to account.\n      */\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      /*\n      * Boom! This should print out public address once we authorize Metamask.\n      */\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    checkIfWalletIsConnected();\n  }, []);\n\n  /*\n  * Add this useEffect right under the other useEffect where you are calling checkIfWalletIsConnected\n  */\n  useEffect(() => {\n    /*\n     * The function we will call that interacts with out smart contract\n     */\n    const fetchNFTMetadata = async () => {\n      console.log('Checking for Character NFT on address:', currentAccount);\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      const txn = await gameContract.checkIfUserHasNFT();\n      if (txn.name) {\n        console.log('User has character NFT #', txn.characterIndex.toNumber());\n        setCharacterNFT(transformCharacterData(txn));\n      } else {\n        console.log('No character NFT found');\n      }\n\n      setIsLoading(false);\n    };\n\n    /*\n     * We only want to run this, if we have a connected wallet\n     */\n    if (currentAccount) {\n      console.log('CurrentAccount:', currentAccount);\n      fetchNFTMetadata();\n    }\n  }, [currentAccount]);\n\n  // Render Methods\n  const renderContent = () => {\n    /*\n    * If the app is currently loading, just render out LoadingIndicator\n    */\n    if (isLoading) {\n      return <LoadingIndicator />;\n    }\n    /*\n     * Scenario #1\n     */\n    if (!currentAccount) {\n      return (\n        <div className=\"connect-wallet-container\">\n          <img\n            src=\"https://c.tenor.com/FpiKvQIbwT8AAAAC/squid-game-eps1-squid-game.gif\"\n            alt=\"Monty Python Gif\"\n          />\n          <button\n            className=\"cta-button connect-wallet-button\"\n            onClick={connectWalletAction}\n          >\n            Connect Wallet To Get Started\n          </button>\n        </div>\n      );\n      /*\n       * Scenario #2\n       */\n    } else if (currentAccount && !characterNFT) {\n      return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\n    } else if (currentAccount && characterNFT) {\n      return <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">🦑 456 Slayer 🦑</p>\n          <p className=\"sub-text\">Team up to protect the Squid Game!</p>\n          {renderContent()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}